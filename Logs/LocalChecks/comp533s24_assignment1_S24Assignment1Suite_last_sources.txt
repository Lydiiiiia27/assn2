//START OF FILE: comp533/Assignment1Test.java
package comp533;

public class Assignment1Test {
	public static void main(final String[] args) {
	    gradingTools.comp533s24.assignment1.S24Assignment1Suite.main(args);
	}


}

//END OF FILE
//START OF FILE: comp533/factory/MapperFactory.java
package comp533.factory;

import comp533.mapper.MapperInterface;
import comp533.mapper.TokenCountingMapper;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;

public class MapperFactory extends AMapReduceTracer {
    private static MapperInterface<String, Integer> mapper = TokenCountingMapper.getSingleton();

    public static MapperInterface<String, Integer> getMapper() {
        return mapper;
    }

    public static void setMapper(final MapperInterface<String, Integer> newMapper) {
        mapper = newMapper;
        AMapReduceTracer.traceSingletonChange(MapperFactory.class, newMapper);
    }
}

//END OF FILE
//START OF FILE: comp533/factory/TokenReduceFactory.java
package comp533.factory;

import comp533.reducer.ReducerInterface;
import comp533.reducer.TokenCountingReducer;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;

public class TokenReduceFactory {
    private static ReducerInterface<String, Integer> reducer = TokenCountingReducer.getInstance();

    public static ReducerInterface<String, Integer> getReducer() {
        return reducer;
    }

    public static void setReducer(final ReducerInterface<String, Integer> newReducer) {
        reducer = newReducer;
        AMapReduceTracer.traceSingletonChange(TokenReduceFactory.class, newReducer);
    }
}

//END OF FILE
//START OF FILE: comp533/main/IntSummingMain.java
package comp533.main;

import comp533.mvc.TokenCounterModel;
import comp533.mvc.TokenCounterView;
import comp533.mvc.IController;
import comp533.mvc.IModel;
//import comp533.mvc.IView;
import comp533.mvc.TokenCounterController;

import java.beans.PropertyChangeListener;

import comp533.factory.MapperFactory;
import comp533.mapper.IntSummingMapper;

public class IntSummingMain {
    public static void main(final String[] args) {
        MapperFactory.setMapper(new IntSummingMapper()); // Set the Int Summing Mapper

        final TokenCounterModel model = new TokenCounterModel();
        final PropertyChangeListener view = new TokenCounterView();
        final IController controller = new TokenCounterController( model);

        model.addPropertyChangeListener((PropertyChangeListener) view);
        controller.processInput();
    }
}

//END OF FILE
//START OF FILE: comp533/mapper/AbstractMapper.java
package comp533.mapper;

import java.util.List;

import comp533.mapping.KeyValueInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;

public abstract class AbstractMapper extends AMapReduceTracer implements MapperInterface<String, Integer> {
    protected AbstractMapper() {}

    public static MapperInterface<String, Integer> getSingleton() {
        
        throw new UnsupportedOperationException("This method should be overridden in subclasses");
    }

    @Override
    public abstract List<KeyValueInterface<String, Integer>> map(final List<String> aStrings);

    @Override
    public abstract String toString();
}


//END OF FILE
//START OF FILE: comp533/mapper/IntSummingMapper.java
package comp533.mapper;

import java.util.ArrayList;
import java.util.List;

import comp533.mapping.KeyValueInterface;
import comp533.mapping.KeyValuePair;
//import gradingTools.comp533s19.assignment0.AMapReduceTracer;

public class IntSummingMapper extends AbstractMapper implements MapperInterface<String, Integer> {
	private static MapperInterface<String, Integer> instance;
	public static final String RESULT_KEY = "ResultKey";
   // private static final MapperInterface<String, Integer> INSTANCE = new IntSummingMapper();

    public IntSummingMapper() {}

/*    public static MapperInterface<String, Integer> getInstance() {
        return new IntSummingMapper();
    }
*/
    
    public static  MapperInterface<String, Integer> getSingleton() {
        if (instance == null) {
        	instance = new IntSummingMapper();
        }
        return instance;
    }
    @Override
    public List<KeyValueInterface<String, Integer>> map(final List<String> aStrings) {
        final List<KeyValueInterface<String, Integer>> mappedList = new ArrayList<>();
        for (String string : aStrings) {
            try {
                final int value = Integer.parseInt(string);
                mappedList.add(new KeyValuePair<>(RESULT_KEY, value));
            } catch (NumberFormatException excp) {
                // Ignore non-integer values
            }
        }

        // Correct tracing with KeyValue objects
        traceMap(aStrings, mappedList);

        return mappedList;
    }

    @Override
    public String toString() {
        return INT_SUMMING_MAPPER;
    }
}

//END OF FILE
//START OF FILE: comp533/mapper/MapperInterface.java
package comp533.mapper;

import java.util.List;

import comp533.mapping.KeyValueInterface;

public abstract interface MapperInterface<K, V> {
    List<KeyValueInterface<K, V>> map(List<String> aStrings);
    
/*     static MapperInterface<K, V> getInstance(){
    	
    }*/
}

//END OF FILE
//START OF FILE: comp533/mapper/TokenCountingMapper.java
package comp533.mapper;

import java.util.ArrayList;
import java.util.List;

import comp533.mapping.KeyValueInterface;
import comp533.mapping.KeyValuePair;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;

public class TokenCountingMapper extends AbstractMapper implements MapperInterface<String, Integer> {
    //private static final MapperInterface<String, Integer> INSTANCE = new TokenCountingMapper();
	private static MapperInterface<String, Integer> instance;
    private TokenCountingMapper() {}

   
    public static synchronized MapperInterface<String, Integer> getSingleton() {
        if (instance == null) {
        	instance = new TokenCountingMapper();
        }
        return instance;
    }

    @Override
    public List<KeyValueInterface<String, Integer>> map(final List<String> aStrings) {
        final List<KeyValueInterface<String, Integer>> mappedList = new ArrayList<>();
        for (String string : aStrings) {
        	traceMap(string,1);
            mappedList.add(new KeyValuePair<>(string, 1));
        }
        return mappedList;
    }

    @Override
    public String toString() {
        return AMapReduceTracer.TOKEN_COUNTING_MAPPER;
    }
}

//END OF FILE
//START OF FILE: comp533/mapping/KeyValueInterface.java
package comp533.mapping;

public interface KeyValueInterface<K, V> {
	K getKey();
	V getValue();
	void setValue(V value);
}

//END OF FILE
//START OF FILE: comp533/mapping/KeyValuePair.java
package comp533.mapping;

public class KeyValuePair<K, V> implements KeyValueInterface<K, V> {
    private final K key;
    private V value;

    public KeyValuePair(final K keyParam,final V valueParam) {
        this.key = keyParam;
        this.value = valueParam;
    }

    @Override
    public K getKey() {
        return key;
    }

    @Override
    public V getValue() {
        return value;
    }

    @Override
    public void setValue(final V valueParam2) {
        this.value = valueParam2;
    }

    @Override
    public String toString() {
        return "(" + key + "," + value + ")";
    }

	
}

//END OF FILE
//START OF FILE: comp533/MapReduceConfigure.java
package comp533;

import comp533.mvc.TokenCounterController;
import comp533.mvc.TokenCounterModel;
import comp533.mvc.TokenCounterView;
//import comp533.stubs.*;
import comp533.token.TokenCounter;
import gradingTools.comp533s21.assignment1.interfaces.MapReduceConfiguration;

public class MapReduceConfigure implements MapReduceConfiguration {

	@Override
	public Object getBarrier(final int arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?> getBarrierClass() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?> getClientTokenCounter() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?> getControllerClass() {
		// TODO Auto-generated method stub
		return TokenCounterController.class;
	}

	@Override
	public Object getIntSummingMapper() {
		// TODO Auto-generated method stub
		return comp533.mapper.IntSummingMapper.getSingleton();
	}

	@Override
	public Class getIntSummingMapperClass() {
		// TODO Auto-generated method stub
		return comp533.mapper.IntSummingMapper.class;
	}

	@Override
	public Object getJoiner(final int arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?> getJoinerClass() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?> getKeyValueClass() {
		// TODO Auto-generated method stub
		return comp533.mapping.KeyValuePair.class;
	}

	@Override
	public Class<?> getMapperFactory() {
		// TODO Auto-generated method stub
		return comp533.factory.MapperFactory.class;
	}

	@Override
	public Class<?> getModelClass() {
		// TODO Auto-generated method stub
		return TokenCounterModel.class;
	}

	@Override
	public Object getPartitioner() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?> getPartitionerClass() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?> getPartitionerFactory() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object getReducer() {
		// TODO Auto-generated method stub
		return comp533.reducer.TokenCountingReducer.getInstance();
	}

	@Override
	public Class<?> getReducerClass() {
		// TODO Auto-generated method stub
		return comp533.reducer.TokenCountingReducer.class;
	}

	@Override
	public Class<?> getReducerFactory() {
		// TODO Auto-generated method stub
		return comp533.factory.TokenReduceFactory.class;
	}

	@Override
	public Class<?> getRemoteClientFacebookMapReduce() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?> getRemoteClientObjectClass() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?> getRemoteClientObjectInterface() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?> getRemoteModelInterface() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?> getServerFacebookMapReduce() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?> getServerIntegerSummer() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?> getServerTokenCounter() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?> getSlaveClass() {
		// TODO Auto-generated method stub
		return Slave.class;
	}

	@Override
	public Class<?> getStandAloneFacebookMapReduce() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?> getStandAloneIntegerSummer() {
		// TODO Auto-generated method stub
		return comp533.main.IntSummingMain.class;
	}

	@Override
	public Class<TokenCounter> getStandAloneTokenCounter() {
		// TODO Auto-generated method stub
		return TokenCounter.class;
	}

	@Override
	public Object getTokenCountingMapper() {
		// TODO Auto-generated method stub
		return comp533.mapper.TokenCountingMapper.getSingleton();
	}

	@Override
	public Class<?> getTokenCountingMapperClass() {
		// TODO Auto-generated method stub
		return comp533.mapper.TokenCountingMapper.class;
	}

	@Override
	public Class<?> getViewClass() {
		// TODO Auto-generated method stub
		return TokenCounterView.class;
	}

}

//END OF FILE
//START OF FILE: comp533/mvc/IController.java
package comp533.mvc;

public interface IController {
    void processInput();
}

//END OF FILE
//START OF FILE: comp533/mvc/IModel.java
package comp533.mvc;

import java.beans.PropertyChangeListener;
import java.util.Map;

public interface IModel {
    String getInputString();
    void setInputString(String inputString);
    Map<String, Integer> getResult();
    void addPropertyChangeListener(PropertyChangeListener listener);
}

//END OF FILE
//START OF FILE: comp533/mvc/IView.java
package comp533.mvc;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

public interface IView {
	void updateView(String data);

	PropertyChangeListener getPropertyChangeListener();

	void propertyChange(PropertyChangeEvent evt);
}

//END OF FILE
//START OF FILE: comp533/mvc/TokenCounterController.java
package comp533.mvc;

import java.util.Scanner;

import gradingTools.comp533s19.assignment0.AMapReduceTracer;

public class TokenCounterController extends AMapReduceTracer implements IController{
    private TokenCounterModel model;
//    private IModel model;

    public TokenCounterController(final TokenCounterModel modelParam) {
        this.model = modelParam;
    }

    @Override
    public void processInput() {
        final Scanner scanner = new Scanner(System.in);


        traceNumbersPrompt();


        //System.out.println("Controller: Please enter 'quit' or a line of tokens to be processed separated by spaces");

//        traceThreadPrompt();
//        int numThreads = scanner.nextInt();
//        scanner.nextLine();
//        model.setNumThreads(numThreads);


        while (scanner.hasNextLine()) {
            final String line = scanner.nextLine();
            if (QUIT.equals(line.toLowerCase())) {
                traceQuit();
                break;
            }
            model.setInputString(line);
        }

        scanner.close();
    }

    @Override
    public String toString() {
        return gradingTools.comp533s19.assignment0.AMapReduceTracer.CONTROLLER;
    }
}

//END OF FILE
//START OF FILE: comp533/mvc/TokenCounterModel.java
package comp533.mvc;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.util.*;

//key-value
import comp533.Slave;
import comp533.factory.MapperFactory;
import comp533.mapper.MapperInterface;
import comp533.mapping.KeyValueInterface;
import comp533.reducer.ReducerInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;
//import gradingTools.comp533s19.assignment0.testcases.factories.ReducerFactory;

public class TokenCounterModel extends AMapReduceTracer {
    private String inputString;
    private Map<String, Integer> result;
    private PropertyChangeSupport changeSupport = new PropertyChangeSupport(this);

    private int numThreads = 0;
    private List<Thread> threads = new ArrayList<>();


    public String getInputString() {
        return inputString;
    }


    public void setInputString(final String inputStringParam) {
        final String oldInput = this.inputString;
        this.inputString = inputStringParam;
        this.result = countTokens(inputString);
        changeSupport.firePropertyChange("InputString", oldInput, inputString);
        changeSupport.firePropertyChange("Result", null, result);
    }

    public Map<String, Integer> getResult() {
        return result;
    }

    /*mvc countToken
    private Map<String, Integer> countTokens(String input) {
        HashMap<String, Integer> tokenCounts = new HashMap<>();
        String[] tokens = input.split(" ");
        for (String token : tokens) {
            tokenCounts.put(token, tokenCounts.getOrDefault(token, 0) + 1);
        }
        return tokenCounts;
    }
*/
    
    /* key value countToken*/
    private Map<String, Integer> countTokens(final String input) {
        final MapperInterface<String, Integer> mapper = MapperFactory.getMapper();
        final List<String> tokens = Arrays.asList(input.split(" "));
        final List<KeyValueInterface<String, Integer>> mappedTokens = mapper.map(tokens);

        final ReducerInterface<String, Integer> reducer = comp533.factory.TokenReduceFactory.getReducer();
        // Tracing the mapping operation
        traceMap(input, mappedTokens);

        // Aggregate the mapped tokens
        final Map<String, Integer> tokenCounts = reducer.reduce(mappedTokens);
        
        
/*        for (KeyValueInterface<String, Integer> b : mappedTokens) {
            final String key = b.getKey();
            tokenCounts.put(key, tokenCounts.getOrDefault(key, 0) + b.getValue());
        }*/

        // Tracing the reducing operation
        traceReduce(mappedTokens, tokenCounts);

        return tokenCounts;
    }

    public void setNumThreads(final int numThreads){
        int oldNumThreads = this.numThreads;
        this.numThreads = numThreads;
        createThreads();
        tracePropertyChange(new PropertyChangeEvent(this,"NumThreads", oldNumThreads, this.numThreads));
    }

    private void createThreads(){
        threads.forEach(Thread::interrupt);
        threads.clear();

        for (int i=0; i<numThreads; i++){
            Slave slave = new Slave(i, this);
            Thread thread = new Thread(slave, "Slave" + i);
            threads.add(thread);
            thread.start();
        }
        tracePropertyChange(new PropertyChangeEvent(this, "Threads", null,new ArrayList<>(threads)));
    }


    public void addPropertyChangeListener(final PropertyChangeListener listener) {
        changeSupport.addPropertyChangeListener(listener);
    }

    @Override
    public String toString() {
        return gradingTools.comp533s19.assignment0.AMapReduceTracer.MODEL;
    }

    public List<Thread> getThreads(){
        return Collections.unmodifiableList(threads);
    }
}

//END OF FILE
//START OF FILE: comp533/mvc/TokenCounterView.java
/*package comp533.mvc;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
//import java.util.EventListener;

import gradingTools.comp533s19.assignment0.AMapReduceTracer;

public  class TokenCounterView extends AMapReduceTracer implements PropertyChangeListener, IView {
 //   private final PropertyChangeListener innerListener = new PropertyChangeListener() {
	@Override
    public void propertyChange(final PropertyChangeEvent evt) {
       tracePropertyChange(evt);
    }

    @Override
    public PropertyChangeListener getPropertyChangeListener() {
    	return innerListener;
    }
    @Override
    public String toString() {
        return gradingTools.comp533s19.assignment0.AMapReduceTracer.VIEW;
    }

	@Override
	public void updateView(final String data) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public PropertyChangeListener getPropertyChangeListener() {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
    public void propertyChange(final PropertyChangeEvent evt) {
        innerListener.propertyChange(evt);
    }
	
}
*/

package comp533.mvc;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;

public class TokenCounterView extends AMapReduceTracer implements PropertyChangeListener {
   
    @Override
    public void propertyChange(final PropertyChangeEvent evt) {
        tracePropertyChange(evt);
    }

/*    @Override
    public void updateView(final String data) {
        
    }

    @Override
    public PropertyChangeListener getPropertyChangeListener() {
        
        return this;
    }
*/
    @Override
    public String toString() {
        return gradingTools.comp533s19.assignment0.AMapReduceTracer.VIEW;
    }
}

//END OF FILE
//START OF FILE: comp533/reducer/ReducerInterface.java
package comp533.reducer;

import java.util.List;
import java.util.Map;

import comp533.mapping.KeyValueInterface;

public interface ReducerInterface<K, V> {
    Map<K, V> reduce(List<KeyValueInterface<K, V>> keyValues);
}

//END OF FILE
//START OF FILE: comp533/reducer/TokenCountingReducer.java
package comp533.reducer;

import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import comp533.mapping.KeyValueInterface;

import java.util.Iterator;

public class TokenCountingReducer extends AMapReduceTracer implements ReducerInterface<String, Integer> {
    private static final AMapReduceTracer INSTANCE = new TokenCountingReducer();

    private TokenCountingReducer() {}

    public static ReducerInterface<String, Integer> getInstance() {
        return (ReducerInterface<String, Integer>) INSTANCE;
    }

    @Override
    public Map<String, Integer> reduce(final List<KeyValueInterface<String, Integer>> keyValues) {
       final Map<String, Integer> reducedMap = new HashMap<>();
        
//        for (KeyValueInterface<String, Integer> keyValue : keyValues) {
//            String key = keyValue.getKey();
//            Integer currentValue = reducedMap.getOrDefault(key, 0);
//            reducedMap.put(key, currentValue + keyValue.getValue());
//        }
       final Iterator<KeyValueInterface<String, Integer>> it = keyValues.iterator();
        while (it.hasNext()) {
           final KeyValueInterface<String, Integer> keyValue = it.next();
           final String key = keyValue.getKey();
           final Integer currentValue = reducedMap.getOrDefault(key, 0);
            reducedMap.put(key, currentValue + keyValue.getValue());
        }
        
        traceReduce(keyValues, reducedMap);
        return reducedMap;
    }

    @Override
    public String toString() {
        return REDUCER;
    }
}

//END OF FILE
//START OF FILE: comp533/RunTests.java
package comp533;
import grader.basics.execution.BasicProjectExecution;

import gradingTools.comp533s24.assignment1.S24Assignment1Suite;
import trace.grader.basics.GraderBasicsTraceUtility;
public class RunTests {
	private static final int TRACE = 2000;
	public static void main(final String[] args) {
		// if you set this to false, grader steps will not be traced
		GraderBasicsTraceUtility.setTracerShowInfo(true);	
		// if you set this to false, all grader steps will be traced,
		// not just the ones that failed		
		GraderBasicsTraceUtility.setBufferTracedMessages(true);
		// Change this number if a test trace gets longer than 600 and is clipped
		GraderBasicsTraceUtility.setMaxPrintedTraces(TRACE);
		// Change this number if all traces together are longer than 2000
		GraderBasicsTraceUtility.setMaxTraces(TRACE);
		// Change this number if your process times out prematurely
		BasicProjectExecution.setProcessTimeOut(TRACE);
		// You need to always call such a method
		S24Assignment1Suite.main(args);
	}
}

//END OF FILE
//START OF FILE: comp533/Slave.java
package comp533;

import gradingTools.comp533s19.assignment0.AMapReduceTracer;
public class Slave extends AMapReduceTracer implements SlaveRunnable  {
    private final int slaveNumber;
    private final Object model; // Assuming model is an Object. Adjust the type accordingly.

    public Slave(int slaveNumber, Object model) {
        this.slaveNumber = slaveNumber;
        this.model = model;
    }

    @Override
    public void run() {
        // Stub method for now
    }

    @Override
    public synchronized void slaveNotifyMethod() {
        traceNotify();
        this.notify();
    }



    @Override
    public String toString() {
        return AMapReduceTracer.SLAVE;
    }
}

//END OF FILE
//START OF FILE: comp533/SlaveRunnable.java
package comp533;

public interface SlaveRunnable extends Runnable{
    void slaveNotifyMethod();
}

//END OF FILE
//START OF FILE: comp533/token/TokenCounter.java
/*
package comp533.token;

import gradingTools.comp533s19.assignment0.AMapReduceTracer;
import java.util.HashMap;
import java.util.Scanner;

public class TokenCounter extends AMapReduceTracer {
    private static final String QUIT = "quit";

    public static void main(String[] args) {
        TokenCounter counter = new TokenCounter();
        counter.processInput();
    }
  
    public void processInput() {
        Scanner scanner = new Scanner(System.in);
        traceNumbersPrompt();

        while (scanner.hasNextLine()) {
            String line = scanner.nextLine();
            if (line.equalsIgnoreCase(QUIT)) {
                traceQuit();
                break;
            }

            HashMap<String, Integer> tokenCounts = countTokens(line);
            traceMap(line, tokenCounts.toString());
        }

        scanner.close();
    }

    private HashMap<String, Integer> countTokens(String input) {
        HashMap<String, Integer> tokenCounts = new HashMap<>();
        String[] tokens = input.split(" ");

        for (String token : tokens) {
            tokenCounts.put(token, tokenCounts.getOrDefault(token, 0) + 1);
        }

        return tokenCounts;
    }

    
    @Override
    protected void traceNumbersPrompt() {
        super.traceNumbersPrompt();
    }

    @Override
    protected void traceQuit() {
        super.traceQuit();
    }

    @Override
    protected void traceMap(Object anInputs, Object aKeyValues) {
        super.traceMap(anInputs, aKeyValues);
    }
   
}
*/



package comp533.token;

import comp533.mvc.TokenCounterModel;
import comp533.mvc.TokenCounterView;

import java.beans.PropertyChangeListener;

import comp533.mvc.IController;
import comp533.mvc.IModel;
//import comp533.mvc.IView;
import comp533.mvc.TokenCounterController;


public class TokenCounter {
    public static void main(final String[] args) {
       final TokenCounterModel model = new TokenCounterModel();
       final PropertyChangeListener view = new TokenCounterView();
       final IController controller = new TokenCounterController(model);

        model.addPropertyChangeListener((PropertyChangeListener) view);
        controller.processInput();
    }
}


//END OF FILE
